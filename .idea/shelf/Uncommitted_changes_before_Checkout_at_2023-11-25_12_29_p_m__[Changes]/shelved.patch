Index: app/src/main/java/com/group6/medicaltest/dao/TestDAO.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group6.medicaltest.dao\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.room.*\r\nimport com.group6.medicaltest.entity.Test\r\n\r\n\r\n@Dao\r\ninterface TestDAO {\r\n\r\n    @Insert\r\n    fun insertTest(test: Test)\r\n\r\n    @Update\r\n    fun updateTest(test: Test)\r\n\r\n    @Delete\r\n    fun deleteTest(test: Test)\r\n\r\n    @Query(\"Select * from test\")\r\n    fun getAllTests(): LiveData<List<Test>>\r\n\r\n    @Query(\"SELECT * From test where patientId= : patientId\")\r\n    fun getTestReport(): LiveData<List<Test>>\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group6/medicaltest/dao/TestDAO.kt b/app/src/main/java/com/group6/medicaltest/dao/TestDAO.kt
--- a/app/src/main/java/com/group6/medicaltest/dao/TestDAO.kt	
+++ b/app/src/main/java/com/group6/medicaltest/dao/TestDAO.kt	
@@ -2,12 +2,14 @@
 
 import androidx.lifecycle.LiveData
 import androidx.room.*
+import com.group6.medicaltest.entity.Patient
 import com.group6.medicaltest.entity.Test
 
 
 @Dao
 interface TestDAO {
 
+    // We need only Insert and fetch for Test
     @Insert
     fun insertTest(test: Test)
 
@@ -20,6 +22,6 @@
     @Query("Select * from test")
     fun getAllTests(): LiveData<List<Test>>
 
-    @Query("SELECT * From test where patientId= : patientId")
-    fun getTestReport(): LiveData<List<Test>>
+//    @Query("SELECT * From test where patientId= : patientId")
+    fun getTestReportByPatient(patientId: Int): LiveData<List<Test>>
 }
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	
+++ /dev/null	
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: app/src/main/java/com/group6/medicaltest/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group6.medicaltest\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.Toast\r\nimport androidx.room.Room\r\nimport com.group6.medicaltest.entity.Nurse\r\nimport com.group6.medicaltest.repository.NurseRepository\r\n\r\n\r\nclass LoginActivity : AppCompatActivity() {\r\n    //private lateinit var nurseId: EditText\r\n    private var nurseRepo: NurseRepository = NurseRepository(application)\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_login)\r\n\r\n        val nurseId = findViewById<EditText>(R.id.editTextUserName)\r\n        val password = findViewById<EditText>(R.id.editTextTextPassword)\r\n        val sharedPreferences = getSharedPreferences(\"MyPrefs\", MODE_PRIVATE)\r\n\r\n        val login = findViewById<View>(R.id.buttonLogin) as Button\r\n        login.setOnClickListener() {\r\n            //Login for Validating Credentials with Database\r\n            val nurse = nurseRepo.getNurseByIdAndPassword(Nurse(nurseId.text.toString().toLong(), \"\", \"\", \"\", password.text.toString()))\r\n            if(nurse != null){\r\n\r\n                // Storing the username (nurseId) into Shared Preferences.\r\n                val editor = sharedPreferences.edit()\r\n                editor.putString(\"nurseId\", nurseId.text.toString())\r\n                editor.commit()\r\n\r\n                intent = Intent(applicationContext, SelectOperationActivity::class.java)\r\n                startActivity(intent)\r\n            } else {\r\n                Toast.makeText(this, \"UserName/Password Wrong, Check Again\", Toast.LENGTH_LONG).show()\r\n            }\r\n        }\r\n\r\n        // Fetching the value from Shared Preferences.\r\n        val sh = getSharedPreferences(\"MyPrefs\", MODE_PRIVATE)\r\n        val s1 = sh.getString(\"nurseId\", \"\")\r\n        // Setting the fetched data in the EditTexts\r\n        nurseId.setText(s1)\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group6/medicaltest/LoginActivity.kt b/app/src/main/java/com/group6/medicaltest/LoginActivity.kt
--- a/app/src/main/java/com/group6/medicaltest/LoginActivity.kt	
+++ b/app/src/main/java/com/group6/medicaltest/LoginActivity.kt	
@@ -36,6 +36,8 @@
                 editor.commit()
 
                 intent = Intent(applicationContext, SelectOperationActivity::class.java)
+                // Need to pass NurseID
+                intent.putExtra("nurseId", nurseId.text.toString())
                 startActivity(intent)
             } else {
                 Toast.makeText(this, "UserName/Password Wrong, Check Again", Toast.LENGTH_LONG).show()
Index: app/src/main/java/com/group6/medicaltest/SelectOperationActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group6.medicaltest\r\n\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.RadioGroup\r\n\r\nclass SelectOperationActivity : AppCompatActivity() {\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_select_operation)\r\n\r\n        val radioGroup = findViewById<View>(R.id.radioGroupOperation) as RadioGroup\r\n        radioGroup.setOnCheckedChangeListener{radioGroup, checkedId ->\r\n//            val addPatientInfo = findViewById<View>(R.id.radioAddPatientInfo)\r\n//            val addTestInfo = findViewById<View>(R.id.radioAddTestInfo)\r\n//            val viewTestInfo = findViewById<View>(R.id.radioViewTestInfo)\r\n//            val updatePatientInfo = findViewById<View>(R.id.radioUpdatePatientInfo)\r\n\r\n            when(radioGroup.getCheckedRadioButtonId()){\r\n                R.id.radioAddPatientInfo -> startActivity(Intent(applicationContext, PatientActivity::class.java))\r\n                R.id.radioAddTestInfo -> startActivity(Intent(applicationContext, TestActivity::class.java))\r\n                R.id.radioViewTestInfo -> startActivity(Intent(applicationContext, ViewTestInfoActivity::class.java))\r\n                R.id.radioUpdatePatientInfo -> startActivity(Intent(applicationContext, UpdateInfoActivity::class.java))\r\n\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group6/medicaltest/SelectOperationActivity.kt b/app/src/main/java/com/group6/medicaltest/SelectOperationActivity.kt
--- a/app/src/main/java/com/group6/medicaltest/SelectOperationActivity.kt	
+++ b/app/src/main/java/com/group6/medicaltest/SelectOperationActivity.kt	
@@ -1,5 +1,6 @@
 package com.group6.medicaltest
 
+import ViewTestInfoActivity
 import android.content.Intent
 import androidx.appcompat.app.AppCompatActivity
 import android.os.Bundle
Index: app/src/main/java/com/group6/medicaltest/UpdateInfoActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group6.medicaltest\r\n\r\nimport android.os.Bundle\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport com.group6.medicaltest.entity.Patient\r\n\r\nclass UpdateInfoActivity : AppCompatActivity() {\r\n\r\n    private lateinit var patientViewModel: PatientViewModel\r\n    private lateinit var editTextFirstName: EditText\r\n    private lateinit var editTextLastName: EditText\r\n    private lateinit var editTextDepartment: EditText\r\n    private lateinit var editTextRoom: EditText\r\n    private lateinit var buttonUpdate: Button\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_update_info)\r\n\r\n        // Initialize UI elements\r\n        editTextFirstName = findViewById(R.id.editTextFirstName)\r\n        editTextLastName = findViewById(R.id.editTextLastName)\r\n        editTextDepartment = findViewById(R.id.editTextDepartment)\r\n        editTextRoom = findViewById(R.id.editTextRoom)\r\n        buttonUpdate = findViewById(R.id.buttonUpdate)\r\n\r\n        // Assuming you have a ViewModel class for Patient\r\n        patientViewModel = ViewModelProvider(this).get(PatientViewModel::class.java)\r\n\r\n        // Get patientId from Intent (you need to pass it from the previous activity)\r\n        val patientId = intent.getIntExtra(\"patientId\", -1)\r\n\r\n        // Fetch and observe patient data for the given patientId\r\n        patientViewModel.getPatientById(patientId).observe(this, { patient ->\r\n            if (patient != null) {\r\n                // Display the current information in the EditText fields\r\n                editTextFirstName.setText(patient.firstName)\r\n                editTextLastName.setText(patient.lastName)\r\n                editTextDepartment.setText(patient.department)\r\n                editTextRoom.setText(patient.room)\r\n            }\r\n        })\r\n\r\n        // Set up click listener for the Update button\r\n        buttonUpdate.setOnClickListener {\r\n            // Retrieve updated data from UI elements\r\n            val updatedFirstName = editTextFirstName.text.toString()\r\n            val updatedLastName = editTextLastName.text.toString()\r\n            val updatedDepartment = editTextDepartment.text.toString()\r\n            val updatedRoom = editTextRoom.text.toString()\r\n\r\n            // Create a Patient object with updated information\r\n            val updatedPatient = Patient(patientId, updatedFirstName, updatedLastName, updatedDepartment, updatedRoom)\r\n\r\n            // Update patient information in the ViewModel\r\n            patientViewModel.updatePatient(updatedPatient)\r\n\r\n            // Finish the activity or navigate to another screen as needed\r\n            finish()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group6/medicaltest/UpdateInfoActivity.kt b/app/src/main/java/com/group6/medicaltest/UpdateInfoActivity.kt
--- a/app/src/main/java/com/group6/medicaltest/UpdateInfoActivity.kt	
+++ b/app/src/main/java/com/group6/medicaltest/UpdateInfoActivity.kt	
@@ -27,6 +27,8 @@
         editTextRoom = findViewById(R.id.editTextRoom)
         buttonUpdate = findViewById(R.id.buttonUpdate)
 
+        val nurseId = intent.getStringExtra("nurseId").toString()
+
         // Assuming you have a ViewModel class for Patient
         patientViewModel = ViewModelProvider(this).get(PatientViewModel::class.java)
 
@@ -53,8 +55,8 @@
             val updatedRoom = editTextRoom.text.toString()
 
             // Create a Patient object with updated information
-            val updatedPatient = Patient(patientId, updatedFirstName, updatedLastName, updatedDepartment, updatedRoom)
-
+//            val updatedPatient = Patient(patientId, updatedFirstName, updatedLastName, updatedDepartment, updatedRoom)
+            val updatedPatient = Patient(patientId, updatedFirstName, updatedLastName, updatedDepartment, nurseId, updatedRoom)
             // Update patient information in the ViewModel
             patientViewModel.updatePatient(updatedPatient)
 
Index: app/src/main/java/com/group6/medicaltest/TestViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group6.medicaltest\r\n\r\nimport android.app.Application\r\nimport androidx.lifecycle.AndroidViewModel\r\nimport androidx.lifecycle.LiveData\r\nimport com.group6.medicaltest.entity.Test\r\nimport com.group6.medicaltest.repository.TestRepository\r\n\r\nclass TestViewModel(application: Application) : AndroidViewModel(application) {\r\n\r\n    private val repository: TestRepository\r\n    private val testsForPatient: LiveData<List<Test>>\r\n\r\n    init {\r\n        repository = TestRepository(application)\r\n        testsForPatient = repository.allTests\r\n    }\r\n\r\n    fun getTestsForPatient(patientId: Int): LiveData<List<Test>> {\r\n        return repository.getTestsForPatient(patientId)\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group6/medicaltest/TestViewModel.kt b/app/src/main/java/com/group6/medicaltest/TestViewModel.kt
--- a/app/src/main/java/com/group6/medicaltest/TestViewModel.kt	
+++ b/app/src/main/java/com/group6/medicaltest/TestViewModel.kt	
@@ -16,7 +16,7 @@
         testsForPatient = repository.allTests
     }
 
-    fun getTestsForPatient(patientId: Int): LiveData<List<Test>> {
-        return repository.getTestsForPatient(patientId)
-    }
+//    fun getTestsForPatient(patientId: Int): LiveData<List<Test>> {
+//        return repository.getTestsForPatient(patientId)
+//    }
 }
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ExternalStorageConfigurationManager\" enabled=\"true\" />\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"Embedded JDK\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	
+++ b/.idea/misc.xml	
@@ -1,7 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ExternalStorageConfigurationManager" enabled="true" />
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Embedded JDK" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="Android Studio default JDK" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
Index: app/src/main/java/com/group6/medicaltest/entity/Nurse.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group6.medicaltest.entity\r\n\r\nimport androidx.room.Entity\r\nimport androidx.room.PrimaryKey\r\n\r\n@Entity(\r\n    tableName=\"nurse\"\r\n)\r\ndata class Nurse(\r\n    @PrimaryKey(autoGenerate = false)\r\n    val nurseId: Long,\r\n    val firstName: String?,\r\n    val lastName: String?,\r\n    val department: String?,\r\n    val password: String?\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/group6/medicaltest/entity/Nurse.kt b/app/src/main/java/com/group6/medicaltest/entity/Nurse.kt
--- a/app/src/main/java/com/group6/medicaltest/entity/Nurse.kt	
+++ b/app/src/main/java/com/group6/medicaltest/entity/Nurse.kt	
@@ -8,7 +8,7 @@
 )
 data class Nurse(
     @PrimaryKey(autoGenerate = false)
-    val nurseId: Long,
+    val nurseId: Int,
     val firstName: String?,
     val lastName: String?,
     val department: String?,
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"GRADLE\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"19\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	
+++ b/.idea/gradle.xml	
@@ -7,7 +7,6 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
-        <option name="gradleJvm" value="19" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"19\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="19" />
+    <bytecodeTargetLevel target="11" />
   </component>
 </project>
\ No newline at end of file
Index: app/src/main/java/com/group6/medicaltest/viewmodel/TestViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group6.medicaltest.viewmodel\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport com.group6.medicaltest.dao.TestDAO\r\nimport com.group6.medicaltest.entity.Test\r\nimport com.group6.medicaltest.repository.TestRepository\r\n\r\nclass TestViewModel(private val TestDAO: TestDAO): ViewModel(){\r\n\r\n    fun getTestResult(): LiveData<List<Test>> = TestDAO.getTestReport()\r\n\r\n    fun insertTestResult() = TestDAO.insertTest(test: Test)\r\n\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/com/group6/medicaltest/viewmodel/TestViewModel.kt b/app/src/main/java/com/group6/medicaltest/viewmodel/TestViewModel.kt
--- a/app/src/main/java/com/group6/medicaltest/viewmodel/TestViewModel.kt	
+++ b/app/src/main/java/com/group6/medicaltest/viewmodel/TestViewModel.kt	
@@ -2,15 +2,27 @@
 
 import androidx.lifecycle.LiveData
 import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
 import com.group6.medicaltest.dao.TestDAO
+import com.group6.medicaltest.entity.Patient
 import com.group6.medicaltest.entity.Test
+import com.group6.medicaltest.repository.PatientRepository
 import com.group6.medicaltest.repository.TestRepository
+import kotlinx.coroutines.launch
+
+class TestViewModel(private val repository: TestRepository): ViewModel(){
+
+    fun insertTestDetails(test: Test) = viewModelScope.launch {
+        repository.insert(test)
+    }
+
+    fun getTestDetailsByPatientId(test: Test) = viewModelScope.launch {
+        repository.getTestByPatientId(test.patientId.toInt())
+    }
 
-class TestViewModel(private val TestDAO: TestDAO): ViewModel(){
 
-    fun getTestResult(): LiveData<List<Test>> = TestDAO.getTestReport()
 
-    fun insertTestResult() = TestDAO.insertTest(test: Test)
+
 
 
 }
\ No newline at end of file
Index: app/src/main/java/com/group6/medicaltest/viewmodel/PatientViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.group6.medicaltest.viewmodel\r\n\r\nimport com.group6.medicaltest.dao.PatientDAO\r\nimport com.group6.medicaltest.entity.Patient\r\n\r\n\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.ViewModel\r\n\r\nimport com.group6.medicaltest.dao.TestDAO\r\nimport com.group6.medicaltest.entity.Test\r\nimport com.group6.medicaltest.repository.PatientRepository\r\n\r\nclass PatientViewModel(private val repository: PatientRepository): ViewModel(){\r\n\r\n    fun updatePatientDetails(patient: Patient) = viewModelScope.launch {\r\n        repository.update(patient)\r\n    }\r\n\r\n}
===================================================================
diff --git a/app/src/main/java/com/group6/medicaltest/viewmodel/PatientViewModel.kt b/app/src/main/java/com/group6/medicaltest/viewmodel/PatientViewModel.kt
--- a/app/src/main/java/com/group6/medicaltest/viewmodel/PatientViewModel.kt	
+++ b/app/src/main/java/com/group6/medicaltest/viewmodel/PatientViewModel.kt	
@@ -1,20 +1,22 @@
 package com.group6.medicaltest.viewmodel
 
-import com.group6.medicaltest.dao.PatientDAO
 import com.group6.medicaltest.entity.Patient
-
-
-import androidx.lifecycle.LiveData
 import androidx.lifecycle.ViewModel
-
-import com.group6.medicaltest.dao.TestDAO
-import com.group6.medicaltest.entity.Test
+import androidx.lifecycle.viewModelScope
 import com.group6.medicaltest.repository.PatientRepository
+import kotlinx.coroutines.launch
 
 class PatientViewModel(private val repository: PatientRepository): ViewModel(){
 
+    fun insertPatientDetails(patient: Patient) = viewModelScope.launch {
+        repository.insert(patient)
+    }
+
+    fun getPatientDetailsById(patient: Patient) = viewModelScope.launch {
+        repository.getPatientById(patient.patientId)
+    }
+
     fun updatePatientDetails(patient: Patient) = viewModelScope.launch {
         repository.update(patient)
     }
-
 }
\ No newline at end of file
